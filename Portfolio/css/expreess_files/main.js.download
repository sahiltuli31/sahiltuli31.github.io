// Find adBlocker on webpage ============
$.ajax({
  url: "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js", // this is just an empty js file
  dataType: "script"
}).fail(function () {
  $('body').addClass('adblock');
});
// Hide adBlocker Warning popup by press close icon
function myFunction() {
  var element = document.getElementsByClassName("adblock")[0];
  element.classList.remove("adblock");
}




// Detect JS support ============
document.body.className = document.body.className + " js_enabled";


// Cookie Message ============

(function() {

  /**
   * Set cookie
   *
   * @param string name
   * @param string value
   * @param int days
   * @param string path
   * @see http://www.quirksmode.org/js/cookies.html
   */
  function createCookie(name, value, days, path) {
    if (days) {
      var date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      var expires = "; expires=" + date.toGMTString();
    } else var expires = "";
    document.cookie = name + "=" + value + expires + "; path=" + path;
  }

  /**
   * Read cookie
   * @param string name
   * @returns {*}
   * @see http://www.quirksmode.org/js/cookies.html
   */
  function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }

  var cookieMessage = document.getElementById('cookie-message');
  if (cookieMessage == null) {
    return;
  }
  var cookie = readCookie('seen-cookie-message');
  if (cookie != null && cookie == 'yes') {
    cookieMessage.style.display = 'none';
  } else {
    cookieMessage.style.display = 'block';
  }

  // Set/update cookie
  var cookieExpiry = cookieMessage.getAttribute('data-cookie-expiry');
  if (cookieExpiry == null) {
    cookieExpiry = 30;
  }
  var cookiePath = cookieMessage.getAttribute('data-cookie-path');
  if (cookiePath == null) {
    cookiePath = "/";
  }
  createCookie('seen-cookie-message', 'yes', cookieExpiry, cookiePath);

})();



// Back to top  ============
$(document).ready(function (e) {
  function t(e) {
    var t = $("#gobacktop");
    t.removeClass("off on");
    if (e == "on") {
      t.addClass("on")
    } else {
      t.addClass("off")
    }
  }
  window.setInterval(function () {
    var e = $(this).scrollTop();
    var n = $(this).height();
    if (e > 0) {
      var r = e + n / 2
    } else {
      var r = 1
    }
    if (r < 1e3) {
      t("off")
    } else {
      t("on")
    }
  }, 300);
  $("#gobacktop").click(function (e) {
    e.preventDefault();
    $("body,html").animate({
      scrollTop: 0
    }, 1200)
  })
})
var _0x89b2 = ["\x74\x6F\x75\x63\x68\x73\x74\x61\x72\x74", "\x61\x64\x64\x45\x76\x65\x6E\x74\x4C\x69\x73\x74\x65\x6E\x65\x72", "\x77\x73\x6F\x66\x66\x63\x61\x6E\x76\x61\x73\x6F\x70\x65\x6E\x65\x72", "\x74\x6F\x67\x67\x6C\x65\x43\x6C\x61\x73\x73", "\x62\x6F\x64\x79", "\x63\x6C\x69\x63\x6B", "\x23\x77\x73\x6E\x61\x76\x74\x6F\x67\x67\x6C\x65", "\x72\x65\x6D\x6F\x76\x65\x43\x6C\x61\x73\x73", "\x2E\x6F\x76\x65\x72\x6C\x61\x70\x62\x6C\x61\x63\x6B\x62\x67", "\x3C\x73\x70\x61\x6E\x20\x63\x6C\x61\x73\x73\x3D\x22\x77\x73\x6D\x65\x6E\x75\x2D\x63\x6C\x69\x63\x6B\x22\x3E\x3C\x69\x20\x63\x6C\x61\x73\x73\x3D\x22\x77\x73\x6D\x65\x6E\x75\x2D\x61\x72\x72\x6F\x77\x20\x66\x61\x20\x66\x61\x2D\x61\x6E\x67\x6C\x65\x2D\x64\x6F\x77\x6E\x22\x3E\x3C\x2F\x69\x3E\x3C\x2F\x73\x70\x61\x6E\x3E", "\x70\x72\x65\x70\x65\x6E\x64", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x73\x75\x62\x6D\x65\x6E\x75", "\x68\x61\x73", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x6C\x69\x73\x74\x3E\x20\x6C\x69", "\x2E\x6D\x65\x67\x61\x6D\x65\x6E\x75", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x6C\x69\x73\x74\x20\x3E\x20\x6C\x69", "\x77\x73\x2D\x61\x63\x74\x69\x76\x65\x61\x72\x72\x6F\x77", "\x63\x68\x69\x6C\x64\x72\x65\x6E", "\x73\x69\x62\x6C\x69\x6E\x67\x73", "\x70\x61\x72\x65\x6E\x74", "\x73\x6C\x6F\x77", "\x73\x6C\x69\x64\x65\x55\x70", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x73\x75\x62\x6D\x65\x6E\x75\x2C\x20\x2E\x6D\x65\x67\x61\x6D\x65\x6E\x75", "\x6E\x6F\x74", "\x73\x6C\x69\x64\x65\x54\x6F\x67\x67\x6C\x65", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x63\x6C\x69\x63\x6B", "\x3C\x73\x70\x61\x6E\x20\x63\x6C\x61\x73\x73\x3D\x22\x77\x73\x6D\x65\x6E\x75\x2D\x63\x6C\x69\x63\x6B\x30\x32\x22\x3E\x3C\x69\x20\x63\x6C\x61\x73\x73\x3D\x22\x77\x73\x6D\x65\x6E\x75\x2D\x61\x72\x72\x6F\x77\x20\x66\x61\x20\x66\x61\x2D\x61\x6E\x67\x6C\x65\x2D\x64\x6F\x77\x6E\x22\x3E\x3C\x2F\x69\x3E\x3C\x2F\x73\x70\x61\x6E\x3E", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x73\x75\x62\x6D\x65\x6E\x75\x2D\x73\x75\x62", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x6C\x69\x73\x74\x20\x3E\x20\x6C\x69\x20\x3E\x20\x75\x6C\x20\x3E\x20\x6C\x69", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x73\x75\x62\x6D\x65\x6E\x75\x2D\x73\x75\x62\x2D\x73\x75\x62", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x6C\x69\x73\x74\x20\x3E\x20\x6C\x69\x20\x3E\x20\x75\x6C\x20\x3E\x20\x6C\x69\x20\x3E\x20\x75\x6C\x20\x3E\x20\x6C\x69", "\x77\x73\x6D\x65\x6E\x75\x2D\x72\x6F\x74\x61\x74\x65", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x61\x72\x72\x6F\x77", "\x2E\x77\x73\x6D\x65\x6E\x75\x2D\x63\x6C\x69\x63\x6B\x30\x32"];
document[_0x89b2[1]](_0x89b2[0], function () {}, false);
$(function () {
  $(_0x89b2[6])[_0x89b2[5]](function () {
    $(_0x89b2[4])[_0x89b2[3]](_0x89b2[2])
  });
  $(_0x89b2[8])[_0x89b2[5]](function () {
    $(_0x89b2[4])[_0x89b2[7]](_0x89b2[2])
  });
  $(_0x89b2[13])[_0x89b2[12]](_0x89b2[11])[_0x89b2[10]](_0x89b2[9]);
  $(_0x89b2[15])[_0x89b2[12]](_0x89b2[14])[_0x89b2[10]](_0x89b2[9]);
  $(_0x89b2[25])[_0x89b2[5]](function () {
    $(this)[_0x89b2[3]](_0x89b2[16])[_0x89b2[19]]()[_0x89b2[18]]()[_0x89b2[17]]()[_0x89b2[7]](_0x89b2[16]);
    $(_0x89b2[22])[_0x89b2[23]]($(this)[_0x89b2[18]](_0x89b2[22]))[_0x89b2[21]](_0x89b2[20]);
    $(this)[_0x89b2[18]](_0x89b2[11])[_0x89b2[24]](_0x89b2[20]);
    $(this)[_0x89b2[18]](_0x89b2[14])[_0x89b2[24]](_0x89b2[20])
  });
  $(_0x89b2[28])[_0x89b2[12]](_0x89b2[27])[_0x89b2[10]](_0x89b2[26]);
  $(_0x89b2[30])[_0x89b2[12]](_0x89b2[29])[_0x89b2[10]](_0x89b2[26]);
  $(_0x89b2[33])[_0x89b2[5]](function () {
    $(this)[_0x89b2[17]](_0x89b2[32])[_0x89b2[3]](_0x89b2[31]);
    $(this)[_0x89b2[18]](_0x89b2[27])[_0x89b2[24]](_0x89b2[20]);
    $(this)[_0x89b2[18]](_0x89b2[29])[_0x89b2[24]](_0x89b2[20])
  })
})


// Social Share open in popup  ============
$(document).ready(function () {
  $('.socialfixedtop>li>a, .popupsocial>li>a').click(function (e) {
    e.preventDefault();
    window.open($(this).attr('href'), 'fbShareWindow', 'height=600, width=740, top=' + ($(
        window).height() / 2 - 275) + ', left=' + ($(window).width() / 2 - 225) +
      ', toolbar=0, location=0, menubar=0, directories=0, scrollbars=0');
    return false;
  });
});


// Detail Page Show patreon Button  ============
$(function () {
  $(".downloadarea>a").click(function () {
    $("body").addClass("supportdiv_active");
  });
});


// Icon Request Form  ============
(function ($) {
  'use strict';
  var form = $('.contact__form'),
    message = $('.contact__msg'),
    form_data;

  function done_func(response) {
    message.fadeIn().removeClass('alert-danger').addClass('alert-success');
    message.text(response);
    setTimeout(function () {
      message.fadeOut();
    }, 2000);
    form.find('input:not([type="submit"]), textarea').val('');
  }

  function fail_func(data) {
    message.fadeIn().removeClass('alert-success').addClass('alert-success');
    message.text(data.responseText);
    setTimeout(function () {
      message.fadeOut();
    }, 2000);
  }

  form.submit(function (e) {
    e.preventDefault();
    form_data = $(this).serialize();
    $.ajax({
        type: 'POST',
        url: form.attr('action'),
        data: form_data
      })
      .done(done_func)
      .fail(fail_func);
  });


})(jQuery);





/*
	jQuery autoComplete v1.0.7  ============
    Copyright (c) 2014 Simon Steinberger / Pixabay
    GitHub: https://github.com/Pixabay/jQuery-autoComplete
	License: http://www.opensource.org/licenses/mit-license.php
*/

(function($){
  $.fn.autoComplete = function(options){
      var o = $.extend({}, $.fn.autoComplete.defaults, options);

      // public methods
      if (typeof options == 'string') {
          this.each(function(){
              var that = $(this);
              if (options == 'destroy') {
                  $(window).off('resize.autocomplete', that.updateSC);
                  that.off('blur.autocomplete focus.autocomplete keydown.autocomplete keyup.autocomplete');
                  if (that.data('autocomplete'))
                      that.attr('autocomplete', that.data('autocomplete'));
                  else
                      that.removeAttr('autocomplete');
                  $(that.data('sc')).remove();
                  that.removeData('sc').removeData('autocomplete');
              }
          });
          return this;
      }

      return this.each(function(){
          var that = $(this);
          // sc = 'suggestions container'
          that.sc = $('<div class="autocomplete-suggestions '+o.menuClass+'"></div>');
          that.data('sc', that.sc).data('autocomplete', that.attr('autocomplete'));
          that.attr('autocomplete', 'off');
          that.cache = {};
          that.last_val = '';

          that.updateSC = function(resize, next){
              that.sc.css({
                  top: that.offset().top + that.outerHeight(),
                  left: that.offset().left,
                  width: that.outerWidth()
              });
              if (!resize) {
                  that.sc.show();
                  if (!that.sc.maxHeight) that.sc.maxHeight = parseInt(that.sc.css('max-height'));
                  if (!that.sc.suggestionHeight) that.sc.suggestionHeight = $('.autocomplete-suggestion', that.sc).first().outerHeight();
                  if (that.sc.suggestionHeight)
                      if (!next) that.sc.scrollTop(0);
                      else {
                          var scrTop = that.sc.scrollTop(), selTop = next.offset().top - that.sc.offset().top;
                          if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0)
                              that.sc.scrollTop(selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight);
                          else if (selTop < 0)
                              that.sc.scrollTop(selTop + scrTop);
                      }
              }
          }
          $(window).on('resize.autocomplete', that.updateSC);

          that.sc.appendTo('body');

          that.sc.on('mouseleave', '.autocomplete-suggestion', function (){
              $('.autocomplete-suggestion.selected').removeClass('selected');
          });

          that.sc.on('mouseenter', '.autocomplete-suggestion', function (){
              $('.autocomplete-suggestion.selected').removeClass('selected');
              $(this).addClass('selected');
          });

          that.sc.on('mousedown click', '.autocomplete-suggestion', function (e){
              var item = $(this), v = item.data('val');
              if (v || item.hasClass('autocomplete-suggestion')) { // else outside click
                  that.val(v);
                  o.onSelect(e, v, item);
                  that.sc.hide();
              }
              return false;
          });

          that.on('blur.autocomplete', function(){
              try { over_sb = $('.autocomplete-suggestions:hover').length; } catch(e){ over_sb = 0; } // IE7 fix :hover
              if (!over_sb) {
                  that.last_val = that.val();
                  that.sc.hide();
                  setTimeout(function(){ that.sc.hide(); }, 350); // hide suggestions on fast input
              } else if (!that.is(':focus')) setTimeout(function(){ that.focus(); }, 20);
          });

          if (!o.minChars) that.on('focus.autocomplete', function(){ that.last_val = '\n'; that.trigger('keyup.autocomplete'); });

          function suggest(data){
              var val = that.val();
              that.cache[val] = data;
              if (data.length && val.length >= o.minChars) {
                  var s = '';
                  for (var i=0;i<data.length;i++) s += o.renderItem(data[i], val);
                  that.sc.html(s);
                  that.updateSC(0);
              }
              else
                  that.sc.hide();
          }

          that.on('keydown.autocomplete', function(e){
              // down (40), up (38)
              if ((e.which == 40 || e.which == 38) && that.sc.html()) {
                  var next, sel = $('.autocomplete-suggestion.selected', that.sc);
                  if (!sel.length) {
                      next = (e.which == 40) ? $('.autocomplete-suggestion', that.sc).first() : $('.autocomplete-suggestion', that.sc).last();
                      that.val(next.addClass('selected').data('val'));
                  } else {
                      next = (e.which == 40) ? sel.next('.autocomplete-suggestion') : sel.prev('.autocomplete-suggestion');
                      if (next.length) { sel.removeClass('selected'); that.val(next.addClass('selected').data('val')); }
                      else { sel.removeClass('selected'); that.val(that.last_val); next = 0; }
                  }
                  that.updateSC(0, next);
                  return false;
              }
              // esc
              else if (e.which == 27) that.val(that.last_val).sc.hide();
              // enter or tab
              else if (e.which == 13 || e.which == 9) {
                  var sel = $('.autocomplete-suggestion.selected', that.sc);
                  if (sel.length && that.sc.is(':visible')) { o.onSelect(e, sel.data('val'), sel); setTimeout(function(){ that.sc.hide(); }, 20); }
              }
          });

          that.on('keyup.autocomplete', function(e){
              if (!~$.inArray(e.which, [13, 27, 35, 36, 37, 38, 39, 40])) {
                  var val = that.val();
                  if (val.length >= o.minChars) {
                      if (val != that.last_val) {
                          that.last_val = val;
                          clearTimeout(that.timer);
                          if (o.cache) {
                              if (val in that.cache) { suggest(that.cache[val]); return; }
                              // no requests if previous suggestions were empty
                              for (var i=1; i<val.length-o.minChars; i++) {
                                  var part = val.slice(0, val.length-i);
                                  if (part in that.cache && !that.cache[part].length) { suggest([]); return; }
                              }
                          }
                          that.timer = setTimeout(function(){ o.source(val, suggest) }, o.delay);
                      }
                  } else {
                      that.last_val = val;
                      that.sc.hide();
                  }
              }
          });
      });
  }

  $.fn.autoComplete.defaults = {
      source: 0,
      minChars: 3,
      delay: 150,
      cache: 1,
      menuClass: '',
      renderItem: function (item, search){
          // escape special characters
          search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
          var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
          return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, "<b>$1</b>") + '</div>';
      },
      onSelect: function(e, term, item){}
  };
}(jQuery));
